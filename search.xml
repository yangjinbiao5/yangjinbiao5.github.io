<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>String</title>
    <url>/2023/08/11/String/</url>
    <content><![CDATA[<p>java8种基本类型</p>
<ul>
<li>boolean (1位 true false)</li>
<li>byte (1字节存储基本单位）</li>
<li>char (16位） </li>
<li>short （16位） </li>
<li>int （32）</li>
<li>float （32） </li>
<li>double （64） </li>
<li>long （64</li>
</ul>
<h4 id="String的结构"><a href="#String的结构" class="headerlink" title="String的结构"></a>String的结构</h4><p>String的本质就是一个char数组</p>
<h4 id="String为什么用final修饰"><a href="#String为什么用final修饰" class="headerlink" title="String为什么用final修饰"></a>String为什么用final修饰</h4><ul>
<li><p>final修饰类，不可继承<br>final类中的所有成员方法都会被隐式地指定为final方法</p>
</li>
<li><p>final修饰属性，属性是不可修改的<br>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p>
</li>
<li><p>final修饰方法，不可重写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面这段话摘自《Java编程思想》第四版第143页：</span><br><span class="line">　　&quot;使用final方法的原因有两个。</span><br><span class="line">　　第一个原因是把方法锁定，以防任何继承类修改它的含义；</span><br><span class="line">　　第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。</span><br><span class="line">　　在最近的Java版本中，不需要使用final方法进行这些优化了。&quot;</span><br><span class="line">注：类的private方法会隐式地被指定为final方法。</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="String是不可变类型"><a href="#String是不可变类型" class="headerlink" title="String是不可变类型"></a>String是不可变类型</h4><ul>
<li>用final修饰</li>
<li>value数组权限控制，以及每次操作生成新对象<br>每次对String都不是在原有的value数组上进行改动，而是生成一个新的数组</li>
</ul>
<p>String为什么被设计成不可变类型</p>
<p>1.无法被继承 私有方法不能被重写（为了语义统一）<br>2.每次操作生成新对象<br>3.线程安全</p>
<p>使用HashMap HashSet 等结构时，一定要注意使用不可变类型作为key<br>假如要使用可变类型作为key，要重写hashCode方法和equals方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">    Set&lt;StringBuilder&gt; set = new HashSet&lt;StringBuilder&gt;();  </span><br><span class="line">  </span><br><span class="line">    StringBuilder stringBuilder1 = new StringBuilder(&quot;a&quot;);  </span><br><span class="line">  </span><br><span class="line">    StringBuilder stringBuilder2 = new StringBuilder(&quot;ab&quot;);  </span><br><span class="line">  </span><br><span class="line">    set.add(stringBuilder1);  </span><br><span class="line">  </span><br><span class="line">    set.add(stringBuilder2);  </span><br><span class="line">  </span><br><span class="line">    stringBuilder1.append(&quot;b&quot;);  </span><br><span class="line">  </span><br><span class="line">    System.out.println(set);  </span><br><span class="line">    // 打印结果： [ab, ab] </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h4><p>String常量池位于方法区，一部分是编译期，一部分是运行时。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">    String test=&quot;123&quot;;  </span><br><span class="line">  </span><br><span class="line">    String str = &quot;1&quot;;  </span><br><span class="line">  </span><br><span class="line">    String str1 = &quot;2&quot;;  </span><br><span class="line">  </span><br><span class="line">    String str2 = &quot;3&quot;;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(test==&quot;1&quot;+&quot;2&quot;+&quot;3&quot;);//true  </span><br><span class="line">  </span><br><span class="line">    System.out.println(test==str+str1+str2);//false  </span><br><span class="line">  </span><br><span class="line">    String s0 = &quot;12&quot;;  </span><br><span class="line">  </span><br><span class="line">    final String s1 = &quot;2&quot;;  </span><br><span class="line">  </span><br><span class="line">    String s2 = &quot;1&quot;+s1;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(s0==s2); //true  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="String中的intern方法"><a href="#String中的intern方法" class="headerlink" title="String中的intern方法"></a>String中的intern方法</h4><p>public native String intern();</p>
<blockquote>
<p>intern 方法用于扩充常量池<br>“abc”.intern()</p>
</blockquote>
<p>首先检查常量池中是否有“abc”，如果存在直接返回实例引用</p>
<p>如果不存在，会在常量池中新增“abc”，然后返回实例引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">    String s1=&quot;abc&quot;;  </span><br><span class="line">  </span><br><span class="line">    String s2 = new String(&quot;abc&quot;);  </span><br><span class="line">  </span><br><span class="line">    System.out.println(s1==s2);//false  </span><br><span class="line">  </span><br><span class="line">    System.out.println(s1==s2.intern());//true  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别"><a href="#String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别" class="headerlink" title="String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别"></a>String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别</h4><p>String是不可变类型<br>StringBuilder和StringBuffer是可变类型<br>StringBuilder是线程不安全的<br>StringBuffer是线程安全的</p>
]]></content>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2023/08/08/Singleton/</url>
    <content><![CDATA[<h2 id="单例模式是什么？"><a href="#单例模式是什么？" class="headerlink" title="单例模式是什么？"></a>单例模式是什么？</h2><p>单例模式就是在整个运行时域一个类只有一个实例对象。</p>
<p>通过单例模式的方法创建的类在当前进程中只有一个实例</p>
<h2 id="为什么需要单例模式？"><a href="#为什么需要单例模式？" class="headerlink" title="为什么需要单例模式？"></a>为什么需要单例模式？</h2><p>有的类比较庞大和复杂，如果频繁地创建和销毁对象，同时这些对象是完全可以复用的，那么就会造成不必要的性能浪费。</p>
<h2 id="单例模式主要关注三点"><a href="#单例模式主要关注三点" class="headerlink" title="单例模式主要关注三点"></a>单例模式主要关注三点</h2><ul>
<li>是不是线程安全</li>
<li>是不是懒加载(懒加载的好处：有的对象构建开销比较大，假如这个对象在项目启动的时候就构建了，万一从来没用到就比较浪费资源）</li>
<li>能不能通过反射进行破坏。</li>
</ul>
<h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 饿汉式1   </span><br><span class="line"> * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 </span><br><span class="line"> */  </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static final Singleton instance = new Singleton();  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 饿汉式2  </span><br><span class="line"> * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 </span><br><span class="line"> */</span><br><span class="line"> public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static final Singleton instance = new Singleton();  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 饿汉式3 静态代码块  </span><br><span class="line"> * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 </span><br><span class="line"> */</span><br><span class="line"> public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static  Singleton instance ;  </span><br><span class="line">  </span><br><span class="line">    static &#123;  </span><br><span class="line">        instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance()&#123;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 枚举类  </span><br><span class="line"> * 线程安全（枚举类型默认是安全的）  </span><br><span class="line"> * 避免反序列化破坏单例，使用枚举类型构造的单例是不能通过反射的方式进行破坏  </span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">public enum Singleton &#123;  </span><br><span class="line">    INSTANCE  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 懒汉式1  </span><br><span class="line"> * 线程不安全  </span><br><span class="line"> */  </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static  Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance()&#123;  </span><br><span class="line">        if (instance==null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 改进1  </span><br><span class="line"> * 懒汉式2 synchronized 同步  </span><br><span class="line"> * 线程安全 ，效率太低（只需在创建对象时做同步，可以直接使用对象的时候就没必要同步）  </span><br><span class="line"> * 耗内存  </span><br><span class="line"> */  </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static  Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    public synchronized static Singleton getInstance()&#123;  </span><br><span class="line">        if (instance==null) &#123;  </span><br><span class="line">            instance = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 改进2  </span><br><span class="line"> * 懒汉式3 双重检查锁定  </span><br><span class="line"> * 线程安全 ，比较常用 ，但是synchronized 依然有一定的性能影响  </span><br><span class="line"> * java多线程：可见性  happens-before原则  </span><br><span class="line"> * 1.程序顺序规则  </span><br><span class="line"> * 2.锁定规则  </span><br><span class="line"> * 3.volatile变量规则  </span><br><span class="line"> * 4.线程启动规则  </span><br><span class="line"> * 5.线程结束规则  </span><br><span class="line"> * 6.中断规则  </span><br><span class="line"> * 7.终结器规则  </span><br><span class="line"> * 8.传递性规则  </span><br><span class="line"> * 缺点：new Singleton()操作在指令层面不是一个原子操作，会分为三步  </span><br><span class="line"> * 1.分配内存  </span><br><span class="line"> * 2.初始化对象  </span><br><span class="line"> * 3.对象指向内存地址  </span><br><span class="line"> * 在真正执行时，JVM为了效率可能会对指令进行重排，比如先执行第一步，再执行第三步，再执行第二步，此时就会出现线程不安全的情况  </span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private static  Singleton instance ;  </span><br><span class="line">  </span><br><span class="line">    public  static Singleton getInstance()&#123;  </span><br><span class="line">        if (instance==null) &#123;  </span><br><span class="line">            synchronized (Singleton.class)&#123;  </span><br><span class="line">                if (instance==null) &#123;  </span><br><span class="line">                    instance = new Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 改进3  </span><br><span class="line"> *懒汉式 ：双检锁+volatile  </span><br><span class="line"> * 线程安全  </span><br><span class="line"> */  </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private volatile static Singleton instance;  </span><br><span class="line"></span><br><span class="line">    public  static Singleton getInstance()&#123;  </span><br><span class="line">        if (instance==null) &#123;  </span><br><span class="line">            synchronized (Singleton.class)&#123;  </span><br><span class="line">                if (instance==null) &#123;  </span><br><span class="line">                    instance = new Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 改进4  </span><br><span class="line"> * 静态内部类  </span><br><span class="line"> * 线程安全</span><br><span class="line"> * 效率高，避免了synchronized 带来的性能影响  </span><br><span class="line"> * 注：静态内部类在程序启动的时候不会加载，只有第一次被调用的时候才会加载 </span><br><span class="line"> */</span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private volatile static Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    private static class InstanceHolder &#123;  </span><br><span class="line">        private static final Singleton SINGLETON = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    public  static Singleton getInstance()&#123;  </span><br><span class="line">        return InstanceHolder.SINGLETON;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * cas方式  </span><br><span class="line"> * 优点：不需要使用传统的锁机制来保证线程安全，CAS是一种基于忙等待的算法，依赖底层硬件的实现，相对于锁它没有线程切换和阻塞的额外消耗，可以支持较大的并行度。  </span><br><span class="line"> * 缺点：如果忙等待一直执行不成功，一直在死循环中，会对CPU造成较大的执行开销。而且这种写法如果有多个线程同时执行singleton= new Singleton(); 会比较耗费内存。  </span><br><span class="line"> */  </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    private Singleton()&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    private  static AtomicReference&lt;Singleton&gt; INSTANCE = new AtomicReference&lt;Singleton&gt;();  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance()&#123;  </span><br><span class="line">        while (true)&#123;  </span><br><span class="line">            Singleton  singleton = INSTANCE.get();  </span><br><span class="line">            if (singleton!=null) &#123;  </span><br><span class="line">                return singleton;  </span><br><span class="line">            &#125;  </span><br><span class="line">            if (INSTANCE.compareAndSet(null,new Singleton())) &#123;  </span><br><span class="line">                return INSTANCE.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * Lock机制  </span><br><span class="line"> * 类似双重校验锁写法  </span><br><span class="line"> */  </span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">  </span><br><span class="line">    private Singleton() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private static Singleton instance = null;  </span><br><span class="line">  </span><br><span class="line">    private static Lock lock = new ReentrantLock();  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        if (instance == null) &#123;  </span><br><span class="line">            //显式调用，手动加锁  </span><br><span class="line">            lock.lock();  </span><br><span class="line">            if (instance == null) &#123;  </span><br><span class="line">                instance = new Singleton();  </span><br><span class="line">            &#125;  </span><br><span class="line">            //显式调用，手动解锁  </span><br><span class="line">            lock.unlock();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2023/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="软件开发的一个不变真理-CHANGE"><a href="#软件开发的一个不变真理-CHANGE" class="headerlink" title="软件开发的一个不变真理:CHANGE"></a>软件开发的一个不变真理:CHANGE</h3><hr>
<h4 id="设计原则1："><a href="#设计原则1：" class="headerlink" title="设计原则1："></a>设计原则1：</h4><ul>
<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混合在一起</li>
</ul>
<h4 id="设计原则2："><a href="#设计原则2：" class="headerlink" title="设计原则2："></a>设计原则2：</h4><ul>
<li>针对接口编程而不是针对实现编程</li>
</ul>
<h4 id="设计原则3："><a href="#设计原则3：" class="headerlink" title="设计原则3："></a>设计原则3：</h4><ul>
<li>多用组合，少用继承</li>
</ul>
<h4 id="设计原则4："><a href="#设计原则4：" class="headerlink" title="设计原则4："></a>设计原则4：</h4><ul>
<li>为交互对象间的松耦合设计而努力（对象之间的交互尽量设计成松耦合）</li>
</ul>
<h4 id="设计原则5："><a href="#设计原则5：" class="headerlink" title="设计原则5："></a>设计原则5：</h4><ul>
<li>开放-关闭原则。类应该对扩展开放，对修改关闭。</li>
</ul>
<hr>
<h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><ul>
<li>定义算法族，分别封装起来，让它们可以互相替换。此模式让算法的变化独立于使用算法的客户。</li>
</ul>
<h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><ul>
<li>定义了对象之间一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</li>
</ul>
<h5 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h5><ul>
<li>动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</li>
</ul>
]]></content>
  </entry>
</search>
