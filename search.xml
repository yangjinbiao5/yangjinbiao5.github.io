<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>String</title>
    <url>/String/</url>
    <content><![CDATA[<p>java8种基本类型</p>
<ul>
<li>boolean (1位 true false)</li>
<li>byte (1字节存储基本单位）</li>
<li>char (16位） </li>
<li>short （16位） </li>
<li>int （32）</li>
<li>float （32） </li>
<li>double （64） </li>
<li>long （64</li>
</ul>
<h4 id="String的结构"><a href="#String的结构" class="headerlink" title="String的结构"></a>String的结构</h4><p>String的本质就是一个char数组</p>
<h4 id="String为什么用final修饰"><a href="#String为什么用final修饰" class="headerlink" title="String为什么用final修饰"></a>String为什么用final修饰</h4><ul>
<li><p>final修饰类，不可继承<br>final类中的所有成员方法都会被隐式地指定为final方法</p>
</li>
<li><p>final修饰属性，属性是不可修改的<br>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p>
</li>
<li><p>final修饰方法，不可重写</p>
<pre class="line-numbers language-none"><code class="language-none">下面这段话摘自《Java编程思想》第四版第143页：
　　&quot;使用final方法的原因有两个。
　　第一个原因是把方法锁定，以防任何继承类修改它的含义；
　　第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。
　　在最近的Java版本中，不需要使用final方法进行这些优化了。&quot;
注：类的private方法会隐式地被指定为final方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="String是不可变类型"><a href="#String是不可变类型" class="headerlink" title="String是不可变类型"></a>String是不可变类型</h4><ul>
<li>用final修饰</li>
<li>value数组权限控制，以及每次操作生成新对象<br>每次对String都不是在原有的value数组上进行改动，而是生成一个新的数组</li>
</ul>
<p>String为什么被设计成不可变类型</p>
<p>1.无法被继承 私有方法不能被重写（为了语义统一）<br>2.每次操作生成新对象<br>3.线程安全</p>
<p>使用HashMap HashSet 等结构时，一定要注意使用不可变类型作为key<br>假如要使用可变类型作为key，要重写hashCode方法和equals方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">StringBuilder</span> stringBuilder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">StringBuilder</span> stringBuilder2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuilder2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    stringBuilder1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 打印结果： [ab, ab] </span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h4><p>String常量池位于方法区，一部分是编译期，一部分是运行时。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token class-name">String</span> test<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token operator">==</span><span class="token string">"1"</span><span class="token operator">+</span><span class="token string">"2"</span><span class="token operator">+</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true  </span>
  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token operator">==</span>str<span class="token operator">+</span>str1<span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false  </span>
  
    <span class="token class-name">String</span> s0 <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">final</span> <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token operator">+</span>s1<span class="token punctuation">;</span>  
  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s0<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true  </span>
  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="String中的intern方法"><a href="#String中的intern方法" class="headerlink" title="String中的intern方法"></a>String中的intern方法</h4><p>public native String intern();</p>
<blockquote>
<p>intern 方法用于扩充常量池<br>“abc”.intern()</p>
</blockquote>
<p>首先检查常量池中是否有“abc”，如果存在直接返回实例引用</p>
<p>如果不存在，会在常量池中新增“abc”，然后返回实例引用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false  </span>
  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true  </span>
  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别"><a href="#String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别" class="headerlink" title="String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别"></a>String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别</h4><p>String是不可变类型<br>StringBuilder和StringBuffer是可变类型<br>StringBuilder是线程不安全的<br>StringBuffer是线程安全的</p>
]]></content>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/Singleton/</url>
    <content><![CDATA[<h2 id="单例模式是什么？"><a href="#单例模式是什么？" class="headerlink" title="单例模式是什么？"></a>单例模式是什么？</h2><p>单例模式就是在整个运行时域一个类只有一个实例对象。</p>
<p>通过单例模式的方法创建的类在当前进程中只有一个实例</p>
<h2 id="为什么需要单例模式？"><a href="#为什么需要单例模式？" class="headerlink" title="为什么需要单例模式？"></a>为什么需要单例模式？</h2><p>有的类比较庞大和复杂，如果频繁地创建和销毁对象，同时这些对象是完全可以复用的，那么就会造成不必要的性能浪费。</p>
<h2 id="单例模式主要关注三点"><a href="#单例模式主要关注三点" class="headerlink" title="单例模式主要关注三点"></a>单例模式主要关注三点</h2><ul>
<li>是不是线程安全</li>
<li>是不是懒加载(懒加载的好处：有的对象构建开销比较大，假如这个对象在项目启动的时候就构建了，万一从来没用到就比较浪费资源）</li>
<li>能不能通过反射进行破坏。</li>
</ul>
<h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 饿汉式1   
 * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
  
<span class="token punctuation">&#125;</span>  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 饿汉式2  
 * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 
 */</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token punctuation">&#125;</span>  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 饿汉式3 静态代码块  
 * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 
 */</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token class-name">Singleton</span> instance <span class="token punctuation">;</span>  
  
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>  
        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 枚举类  
 * 线程安全（枚举类型默认是安全的）  
 * 避免反序列化破坏单例，使用枚举类型构造的单例是不能通过反射的方式进行破坏  
 */</span>
 
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token constant">INSTANCE</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 懒汉式1  
 * 线程不安全  
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 改进1  
 * 懒汉式2 synchronized 同步  
 * 线程安全 ，效率太低（只需在创建对象时做同步，可以直接使用对象的时候就没必要同步）  
 * 耗内存  
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 改进2  
 * 懒汉式3 双重检查锁定  
 * 线程安全 ，比较常用 ，但是synchronized 依然有一定的性能影响  
 * java多线程：可见性  happens-before原则  
 * 1.程序顺序规则  
 * 2.锁定规则  
 * 3.volatile变量规则  
 * 4.线程启动规则  
 * 5.线程结束规则  
 * 6.中断规则  
 * 7.终结器规则  
 * 8.传递性规则  
 * 缺点：new Singleton()操作在指令层面不是一个原子操作，会分为三步  
 * 1.分配内存  
 * 2.初始化对象  
 * 3.对象指向内存地址  
 * 在真正执行时，JVM为了效率可能会对指令进行重排，比如先执行第一步，再执行第三步，再执行第二步，此时就会出现线程不安全的情况  
 */</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token class-name">Singleton</span> instance <span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">&#125;</span>  
            <span class="token punctuation">&#125;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 改进3  
 *懒汉式 ：双检锁+volatile  
 * 线程安全  
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>  

    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">&#125;</span>  
            <span class="token punctuation">&#125;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * 改进4  
 * 静态内部类  
 * 线程安全
 * 效率高，避免了synchronized 带来的性能影响  
 * 注：静态内部类在程序启动的时候不会加载，只有第一次被调用的时候才会加载 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>  
  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">SINGLETON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> <span class="token class-name">InstanceHolder</span><span class="token punctuation">.</span><span class="token constant">SINGLETON</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * cas方式  
 * 优点：不需要使用传统的锁机制来保证线程安全，CAS是一种基于忙等待的算法，依赖底层硬件的实现，相对于锁它没有线程切换和阻塞的额外消耗，可以支持较大的并行度。  
 * 缺点：如果忙等待一直执行不成功，一直在死循环中，会对CPU造成较大的执行开销。而且这种写法如果有多个线程同时执行singleton= new Singleton(); 会比较耗费内存。  
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singleton</span><span class="token punctuation">></span></span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singleton</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token class-name">Singleton</span>  singleton <span class="token operator">=</span> <span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
                <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
                <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span>  
        <span class="token punctuation">&#125;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  
 * Lock机制  
 * 类似双重校验锁写法  
 */</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  
  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            <span class="token comment">//显式调用，手动加锁  </span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span>  
            <span class="token comment">//显式调用，手动解锁  </span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="软件开发的一个不变真理-CHANGE"><a href="#软件开发的一个不变真理-CHANGE" class="headerlink" title="软件开发的一个不变真理:CHANGE"></a>软件开发的一个不变真理:CHANGE</h3><hr>
<h4 id="设计原则1："><a href="#设计原则1：" class="headerlink" title="设计原则1："></a>设计原则1：</h4><ul>
<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混合在一起</li>
</ul>
<h4 id="设计原则2："><a href="#设计原则2：" class="headerlink" title="设计原则2："></a>设计原则2：</h4><ul>
<li>针对接口编程而不是针对实现编程</li>
</ul>
<h4 id="设计原则3："><a href="#设计原则3：" class="headerlink" title="设计原则3："></a>设计原则3：</h4><ul>
<li>多用组合，少用继承</li>
</ul>
<h4 id="设计原则4："><a href="#设计原则4：" class="headerlink" title="设计原则4："></a>设计原则4：</h4><ul>
<li>为交互对象间的松耦合设计而努力（对象之间的交互尽量设计成松耦合）</li>
</ul>
<h4 id="设计原则5："><a href="#设计原则5：" class="headerlink" title="设计原则5："></a>设计原则5：</h4><ul>
<li>开放-关闭原则。类应该对扩展开放，对修改关闭。</li>
</ul>
<h4 id="设计原则6："><a href="#设计原则6：" class="headerlink" title="设计原则6："></a>设计原则6：</h4><ul>
<li>依赖倒置原则。 要依赖抽象，不要依赖具体类。</li>
</ul>
<hr>
<h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><ul>
<li>定义算法族，分别封装起来，让它们可以互相替换。此模式让算法的变化独立于使用算法的客户。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CalculatorStrategy</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> num1<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">CalculatorStrategy</span> <span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> num1<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DivideStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">CalculatorStrategy</span> <span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> num1<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Divisor cannot be zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token comment">//return num1 / num2;  </span>
        <span class="token keyword">return</span> num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiplyStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">CalculatorStrategy</span> <span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> num1<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token comment">//return num1 * num2;  </span>
        <span class="token keyword">return</span> num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubtractStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">CalculatorStrategy</span> <span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> num1<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorContext</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">CalculatorStrategy</span> strategy<span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">CalculatorContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token class-name">CalculatorStrategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Strategy cannot be null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token comment">// 策略模式  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  
        <span class="token class-name">CalculatorContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculatorContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 设置加法策略并执行计算  </span>
        context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">Float</span> f <span class="token operator">=</span> <span class="token number">5.3f</span><span class="token punctuation">;</span>  
        <span class="token keyword">double</span> result1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token string">"10.2"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result1="</span><span class="token operator">+</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 设置减法策略并执行计算  </span>
        context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubtractStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">double</span> result2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token string">"10.1"</span><span class="token punctuation">,</span><span class="token string">"2.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result2="</span><span class="token operator">+</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 设置乘法策略并执行计算  </span>
        context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MultiplyStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">double</span> result3 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"2.7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result3="</span><span class="token operator">+</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token comment">// 设置除法策略并执行计算  </span>
        context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DivideStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">double</span> result4 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token string">"10.5"</span><span class="token punctuation">,</span> <span class="token string">"2.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result4="</span><span class="token operator">+</span>result4<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><ul>
<li>定义了对象之间一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 观察者接口  </span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
<span class="token comment">// 主题接口  </span>
<span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
<span class="token comment">// 具体主题类  </span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>  
        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
                observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span>  
        <span class="token punctuation">&#125;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token comment">// 具体观察者类  </span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">private</span> <span class="token class-name">ConcreteSubject</span> subject<span class="token punctuation">;</span>  
  
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token class-name">ConcreteSubject</span> subject<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观察者"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"收到通知，主题状态更新为："</span> <span class="token operator">+</span> subject<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token comment">// 测试类  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverPatternExample</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">ConcreteSubject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">ConcreteObserver</span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">ConcreteObserver</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        subject<span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h5 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h5><ul>
<li>动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</li>
</ul>
<h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><ul>
<li>定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span><span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductA operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ProductB operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid product type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
        <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  
            <span class="token class-name">Product</span> a <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            a<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> runtimeException<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtimeException<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
  
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  
            <span class="token class-name">Product</span> b <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            b<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> runtimeException<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtimeException<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  
            <span class="token class-name">Product</span> c <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            c<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> runtimeException<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtimeException<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
  
  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><ul>
<li>提供了一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</li>
</ul>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul>
<li>详情请看 <em><strong><a href="/Singleton">单例模式</a></strong></em></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>深入理解JVM</title>
    <url>/JVM/</url>
    <content><![CDATA[<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><ol>
<li>程序计数器 。当前线程所执行字节码的行号指示器。线程私有，唯一没有OOM的区域。</li>
<li>虚拟机栈。 线程私有。执行方法会创建栈帧，用于存储局部变量表、操作数栈、动态链接、方法出入口等信息。有StackOverflowError 和OOM.</li>
<li>本地方法栈。与虚拟机栈类似。只不过是为本地方法服务。</li>
<li>java堆。用于存放对象实例。是垃圾收集器管理的主要区域。通过-xmx 和-xms控制堆的大小（一般设置成一样，内存扩大或缩小导致应用停顿，降低延迟）</li>
<li>方法区。用于存储类信息、常量、静态变量、即时编译器编译后的代码等数据。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。有OOM。</li>
<li>运行时常量池。是方法区的一部分，用于存放编译期产生的各种字面量和符号引用。运行期间也可能有新的常量放入池中。</li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>关于Kotlin</title>
    <url>/Kotlin/</url>
    <content><![CDATA[<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>分号是可选的，kotlin倾向于省略分号.</li>
<li>REPL 读取-求值-输出-循环 命令行</li>
<li>可作为脚本运行</li>
<li>可编译为其他目标（Android,JavaScript,WebAssembly等)</li>
<li>变量类型推断</li>
<li>语句和表达式可以脱离类和方法存在，当代码被编译或作为脚本执行时，kotlin根据需要创建包装类和方法。</li>
<li>try-catch 是可选的</li>
<li>val不可变，相当于java的final，var可变。如果可能，尽量选择val而不是var</li>
<li>&#x3D;&#x3D; 相当于java的equals()方法，&#x3D;&#x3D;&#x3D; 相当于java的 &#x3D;&#x3D; 。改进的点是kotlin会处理null，不会出现空指针异常。( null &#x3D;&#x3D; null  返回true , null &#x3D;&#x3D; “hi” 返回false)</li>
<li>方便好用的字符串模板<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">
<span class="token keyword">val</span> price <span class="token operator">=</span> <span class="token number">12</span>  
<span class="token keyword">val</span> taxRate <span class="token number">1.2</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"price:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">price</span></span><span class="token string">,taxRate:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">taxRate</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"you should pay </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">price <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>taxRate<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>原始字符串和多行字符串使用三个双引号包围，原始字符串可以不使用转义字符串，并且可以用作字符串模板。 （关于trimMargin()方法）</li>
<li>更多的表达式，更少的语句<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">canVote</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>age<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>String <span class="token punctuation">&#123;</span>
	<span class="token keyword">val</span> status <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">"yes,please vote"</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">"nope ,please come back"</span></span> 
	<span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">status</span></span><span class="token string">"</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>KISS函数（Keep it simple ,stupid)</li>
<li>函数返回类型可推断</li>
<li>Kotlin 使用Unit类，表示不包含任何信息的单例，对应于Java的void类型。所以Kotlin的函数必然有返回值，至少是Unit。</li>
<li>默认参数 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>msg<span class="token operator">:</span>String<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"hello"</span></span><span class="token punctuation">)</span><span class="token operator">:</span>String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">msg</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">"</span></span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"cartman"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hello,cartman</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"cartman"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hi,cartman</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>使用命名参数<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>age<span class="token operator">:</span>Int<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>height<span class="token operator">:</span>Int<span class="token punctuation">,</span>weight<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
       <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">height</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">weight</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  
<span class="token punctuation">&#125;</span>
<span class="token function">createPersion</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"jake"</span></span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">//使用命名参数，参数顺序可以是乱的,有默认值的参数可以忽略使用默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>可变数量的实参 (vararg 只有一个参数可以注释为vararg,并且要放到末尾), spread 运行符(*将数组的值作为vararg参数的离散值来展开) <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> numbers<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">&#123;</span>  
       <span class="token keyword">var</span> large<span class="token operator">=</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  
       <span class="token keyword">for</span><span class="token punctuation">(</span>number <span class="token keyword">in</span> numbers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
               large <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">></span>large<span class="token punctuation">)</span> number <span class="token keyword">else</span> large  
       <span class="token punctuation">&#125;</span>  
       <span class="token keyword">return</span> large  
<span class="token punctuation">&#125;</span>  
  
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token keyword">val</span> l1 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>  
<span class="token keyword">var</span> l2 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">*</span>l2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//spread运行符*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>解构 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Triple</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"John"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"Adams"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"Quincy"</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span>middle<span class="token punctuation">,</span>last<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">first</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">middle</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">last</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token keyword">val</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span>_<span class="token punctuation">,</span>last<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可以使用下划线跳过某个属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>范围与迭代 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">//1,2,3,4,5, 正向迭代</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>ch <span class="token keyword">in</span> <span class="token char">'a'</span><span class="token operator">..</span><span class="token char">'e'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// abcde</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">5</span> downTo <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// 5,4,3,2,1, 反向迭代</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// 不包含5</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">10</span> step <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// i=i+3 </span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">0</span> step <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">//</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">&#123;</span> it<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> it <span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">,"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>遍历数组和列表<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>e <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>e <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>index <span class="token keyword">in</span> list<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//indices属性</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Positio of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> list<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// withIndex()函数</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Position of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>when<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/Nginx/</url>
    <content><![CDATA[<h4 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h4><ol>
<li>web服务器  <pre class="line-numbers language-json" data-language="json"><code class="language-json">
server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;   # 监听端口
       server_name  localhost; # 绑定域名
       location / <span class="token punctuation">&#123;</span>  
           root   /usr/share/nginx/html;  
           index  index.html index.htm;  
       <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">443</span> ssl;  # 监听端口
       server_name  localhost; # 绑定域名
       ssl_certificate      cert.pem;
       ssl_certificate_key  cert.key;
       location / <span class="token punctuation">&#123;</span>  
           root   /usr/share/nginx/html;  
           index  index.html index.htm;  
       <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>反向代理<pre class="line-numbers language-json" data-language="json"><code class="language-json">
server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  localhost; # 绑定域名
       location / <span class="token punctuation">&#123;</span>  
	       proxy_pass http<span class="token operator">:</span><span class="token comment">//localhost:8080; # 后端服务器与端口</span>
	       proxy_set_header Host $host; # 保留原始Host头
	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP
       <span class="token punctuation">&#125;</span>
       
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>负载均衡<pre class="line-numbers language-json" data-language="json"><code class="language-json">upstream webservers<span class="token punctuation">&#123;</span>
	
	server <span class="token number">192.168</span>.<span class="token number">1.100</span><span class="token operator">:</span><span class="token number">8080</span>;
	server <span class="token number">192.168</span>.<span class="token number">1.101</span><span class="token operator">:</span><span class="token number">8080</span>;
	server <span class="token number">192.168</span>.<span class="token number">1.102</span><span class="token operator">:</span><span class="token number">8080</span>;
	# 可选的负载均衡策略 默认轮询
	# ip_hash; # IP哈希
	# least_conn; # 最少连接
<span class="token punctuation">&#125;</span>
 server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  localhost; # 绑定域名
       location / <span class="token punctuation">&#123;</span>  
	       proxy_pass http<span class="token operator">:</span><span class="token comment">//webservers;</span>
	       proxy_set_header Host $host; # 保留原始Host头
	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP
       <span class="token punctuation">&#125;</span>
       
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>URL重定向<pre class="line-numbers language-json" data-language="json"><code class="language-json"> # 将老域名重定向到新域名 保持url不变
 server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  old.com; # 绑定域名
       location / <span class="token punctuation">&#123;</span>  
	       rewrite ^/(.*)$ https<span class="token operator">:</span><span class="token comment">//new.com/$1;</span>
       <span class="token punctuation">&#125;</span>
       
<span class="token punctuation">&#125;</span>
# URL变更
server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  localhost; # 绑定域名
       location / <span class="token punctuation">&#123;</span>  
	       rewrite ^/old-path/(.*)$ /new-path/$<span class="token number">1</span>;
       <span class="token punctuation">&#125;</span>
       
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>防盗链<pre class="line-numbers language-json" data-language="json"><code class="language-json">server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  localhost; # 绑定域名
       location ~* \.(gif|jpg|png)$ <span class="token punctuation">&#123;</span>  
	       valid_referers none blocked *.something.com;
	       if($invalid_referer) <span class="token punctuation">&#123;</span>
		       return <span class="token number">403</span>;
	       <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
       
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>简易文件服务器<pre class="line-numbers language-json" data-language="json"><code class="language-json">server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  localhost; # 绑定域名
       # 完整路径 /home/cartman/Downloads/test
       location /test <span class="token punctuation">&#123;</span>  
	       root /home/cartman/Downloads;  
	       # 显示目录;    
		   autoindex on;  
		   # 显示文件大小; 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb)    
		   autoindex_exact_size off;    
		   # 显示文件时间    
		   autoindex_localtime on;
		   # 避免中文乱码;    
		   charset utf<span class="token number">-8</span>;
       <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>基于不同请求路径转发不同服务<pre class="line-numbers language-json" data-language="json"><code class="language-json">server <span class="token punctuation">&#123;</span>  
       listen       <span class="token number">80</span>;  # 监听端口
       server_name  localhost; # 绑定域名
       location /path1/ <span class="token punctuation">&#123;</span>  
	       proxy_pass http<span class="token operator">:</span><span class="token comment">//ip1:8080; # 后端服务器与端口</span>
	       proxy_set_header Host $host; # 保留原始Host头
	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP
       <span class="token punctuation">&#125;</span>
       location /path2/ <span class="token punctuation">&#123;</span>  
	       proxy_pass http<span class="token operator">:</span><span class="token comment">//ip2:8080; # 后端服务器与端口</span>
	       proxy_set_header Host $host; # 保留原始Host头
	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP
       <span class="token punctuation">&#125;</span>
       location /path3/ <span class="token punctuation">&#123;</span>  
	       proxy_pass http<span class="token operator">:</span><span class="token comment">//ip3:8080; # 后端服务器与端口</span>
	       proxy_set_header Host $host; # 保留原始Host头
	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP
       <span class="token punctuation">&#125;</span>
       
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
  </entry>
</search>
