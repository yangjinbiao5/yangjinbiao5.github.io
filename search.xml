<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JUC</title>
    <url>/JUC/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin</title>
    <url>/Kotlin/</url>
    <content><![CDATA[<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>分号是可选的，kotlin倾向于省略分号.</li>
<li>REPL 读取-求值-输出-循环 命令行</li>
<li>可作为脚本运行</li>
<li>可编译为其他目标（Android,JavaScript,WebAssembly等)</li>
<li>变量类型推断</li>
<li>语句和表达式可以脱离类和方法存在，当代码被编译或作为脚本执行时，kotlin根据需要创建包装类和方法。</li>
<li>try-catch 是可选的</li>
<li>val不可变，相当于java的final，var可变。如果可能，尽量选择val而不是var</li>
<li>&#x3D;&#x3D; 相当于java的equals()方法，&#x3D;&#x3D;&#x3D; 相当于java的 &#x3D;&#x3D; 。改进的点是kotlin会处理null，不会出现空指针异常。( null &#x3D;&#x3D; null  返回true , null &#x3D;&#x3D; “hi” 返回false)</li>
<li>方便好用的字符串模板<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> price = <span class="number">12</span>  </span><br><span class="line"><span class="keyword">val</span> taxRate <span class="number">1.2</span></span><br><span class="line">println(<span class="string">&quot;price:<span class="variable">$price</span>,taxRate:<span class="variable">$taxRate</span>&quot;</span>)</span><br><span class="line">println(<span class="string">&quot;you should pay <span class="subst">$&#123;price * (<span class="number">1</span>+taxRate)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>原始字符串和多行字符串使用三个双引号包围，原始字符串可以不使用转义字符串，并且可以用作字符串模板。 （关于trimMargin()方法）</li>
<li>更多的表达式，更少的语句<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">canVote</span><span class="params">(name:<span class="type">String</span>,age:<span class="type">Int</span>)</span></span>:String &#123;</span><br><span class="line">	<span class="keyword">val</span> status = <span class="keyword">if</span>(age&gt;<span class="number">17</span>) <span class="string">&quot;yes,please vote&quot;</span> <span class="keyword">else</span> <span class="string">&quot;nope ,please come back&quot;</span> </span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;<span class="variable">$name</span>,<span class="variable">$status</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>KISS函数（Keep it simple ,stupid)</li>
<li>函数返回类型可推断</li>
<li>Kotlin 使用Unit类，表示不包含任何信息的单例，对应于Java的void类型。所以Kotlin的函数必然有返回值，至少是Unit。</li>
<li>默认参数 <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greet</span><span class="params">(name:<span class="type">String</span>,msg:<span class="type">String</span>=<span class="string">&quot;hello&quot;</span>)</span></span>:String = <span class="string">&quot;<span class="variable">$msg</span>,<span class="variable">$name</span>&quot;</span></span><br><span class="line">println(greet(<span class="string">&quot;cartman&quot;</span>)) <span class="comment">// hello,cartman</span></span><br><span class="line">println(greet(<span class="string">&quot;cartman&quot;</span>,<span class="string">&quot;hi&quot;</span>)) <span class="comment">// hi,cartman</span></span><br></pre></td></tr></table></figure></li>
<li>使用命名参数<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createPerson</span><span class="params">(name:<span class="type">String</span>,age:<span class="type">Int</span>=<span class="number">1</span>,height:<span class="type">Int</span>,weight:<span class="type">Int</span>)</span></span>&#123;  </span><br><span class="line">       println(<span class="string">&quot;<span class="variable">$name</span> <span class="variable">$age</span> <span class="variable">$height</span> <span class="variable">$weight</span>&quot;</span>)  </span><br><span class="line">&#125;</span><br><span class="line">createPersion(name=<span class="string">&quot;jake&quot;</span>,age=<span class="number">12</span>,weight=<span class="number">150</span>,height=<span class="number">50</span>) <span class="comment">//使用命名参数，参数顺序可以是乱的,有默认值的参数可以忽略使用默认值</span></span><br></pre></td></tr></table></figure></li>
<li>可变数量的实参 (vararg 只有一个参数可以注释为vararg,并且要放到末尾), spread 运行符(*将数组的值作为vararg参数的离散值来展开) <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(<span class="keyword">vararg</span> numbers:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;  </span><br><span class="line">       <span class="keyword">var</span> large=numbers[<span class="number">0</span>]  </span><br><span class="line">       <span class="keyword">for</span>(number <span class="keyword">in</span> numbers)&#123;  </span><br><span class="line">               large = <span class="keyword">if</span>(number&gt;large) number <span class="keyword">else</span> large  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">return</span> large  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">println(max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">0</span>))  </span><br><span class="line"><span class="keyword">val</span> l1 = listOf(<span class="number">1</span>,<span class="number">4</span>,<span class="number">18</span>,<span class="number">12</span>)  </span><br><span class="line"><span class="keyword">var</span> l2 = l1.toIntArray()  </span><br><span class="line">println(max(*l2)) <span class="comment">//spread运行符*</span></span><br></pre></td></tr></table></figure></li>
<li>解构 <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getFullName</span><span class="params">()</span></span> = Triple(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;Adams&quot;</span>,<span class="string">&quot;Quincy&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> (first,middle,last) = getFullName()</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$first</span> <span class="variable">$middle</span> <span class="variable">$last</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> (first,_,last) = getFullName() <span class="comment">//可以使用下划线跳过某个属性</span></span><br></pre></td></tr></table></figure></li>
<li>范围与迭代 <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123; print(<span class="string">&quot;<span class="variable">$i</span>,&quot;</span>)&#125; <span class="comment">//1,2,3,4,5, 正向迭代</span></span><br><span class="line"><span class="keyword">for</span>(ch <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;e&#x27;</span>) &#123; print(ch)&#125; <span class="comment">// abcde</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">5</span> downTo <span class="number">1</span>) &#123;print(<span class="string">&quot;<span class="variable">$i</span>,&quot;</span>)&#125; <span class="comment">// 5,4,3,2,1, 反向迭代</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">5</span>) &#123;print(<span class="string">&quot;<span class="variable">$i</span>,&quot;</span>)&#125; <span class="comment">// 不包含5</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span> step <span class="number">3</span>) &#123; print(<span class="string">&quot;<span class="variable">$i</span>,&quot;</span>)&#125; <span class="comment">// i=i+3 </span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">0</span> step <span class="number">3</span>) &#123;print(<span class="string">&quot;<span class="variable">$i</span>,&quot;</span>)&#125; <span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> (<span class="number">1.</span><span class="number">.9</span>).filter &#123; it%<span class="number">3</span>==<span class="number">0</span> || it %<span class="number">5</span> ==<span class="number">0</span>&#125;) &#123;</span><br><span class="line">	print(<span class="string">&quot;<span class="variable">$i</span>,&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>遍历数组和列表<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> array = arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span>(e <span class="keyword">in</span> array) &#123;println(<span class="string">&quot;<span class="variable">$e</span>&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span>(e <span class="keyword">in</span> list) &#123;println(<span class="string">&quot;<span class="variable">$e</span>&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">for</span>(index <span class="keyword">in</span> list.indices)&#123;  <span class="comment">//indices属性</span></span><br><span class="line">	println(<span class="string">&quot;Positio of <span class="subst">$&#123;list.get(index)&#125;</span> is <span class="variable">$index</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>((index,value) <span class="keyword">in</span> list.withIndex()) &#123; <span class="comment">// withIndex()函数</span></span><br><span class="line">	println(<span class="string">&quot;Position of <span class="variable">$value</span> is <span class="variable">$index</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>when<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>soft</tag>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/Docker/</url>
    <content><![CDATA[<h2 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h2><ul>
<li><p>Web 应用的自动化打包和发布。</p>
</li>
<li><p>自动化测试和持续集成、发布。</p>
</li>
<li><p>在服务型环境中部署和调整数据库或其他的后台应用。</p>
</li>
<li><p>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</p>
</li>
</ul>
<h2 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h2><h3 id="1、快速，一致地交付您的应用程序"><a href="#1、快速，一致地交付您的应用程序" class="headerlink" title="1、快速，一致地交付您的应用程序"></a>1、快速，一致地交付您的应用程序</h3><h3 id="2、响应式部署和扩展"><a href="#2、响应式部署和扩展" class="headerlink" title="2、响应式部署和扩展"></a>2、响应式部署和扩展</h3><h3 id="3、在同一硬件上运行更多工作负载"><a href="#3、在同一硬件上运行更多工作负载" class="headerlink" title="3、在同一硬件上运行更多工作负载"></a>3、在同一硬件上运行更多工作负载</h3><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>docker pull<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 Docker 仓库拉取镜像</span></span><br><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure></li>
<li>docker push<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将镜像推送到 Docker 仓库</span></span><br><span class="line">docker push my-image</span><br></pre></td></tr></table></figure></li>
<li>docker images<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地存储的所有镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></li>
<li>docker run<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>docker start | docker restart| docker stop<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动|重启|停止容器</span></span><br><span class="line">docker start container_name</span><br><span class="line">docker restart container_name</span><br><span class="line">docker stop container_name</span><br></pre></td></tr></table></figure></li>
<li>docker ps<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出正在运行的容器。</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li>
<li>docker exec<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在容器中执行命令。 i交互 t终端</span></span><br><span class="line">docker exec -it container_name /bin/bash</span><br></pre></td></tr></table></figure></li>
<li>docker network<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个自定义网络并将容器连接到该网络</span></span><br><span class="line">docker network create my_network </span><br><span class="line">docker run -d --network my_network ubuntu</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>docker logs<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs [ID或者名字] 可以查看容器内部的标准输出</span></span><br><span class="line">docker logs -f bf08b7f2cd89</span><br></pre></td></tr></table></figure></li>
<li>docker volume<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">**功能**：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许容器间共享数据。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保证数据持久化，独立于容器的生命周期。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建并挂载卷：</span></span><br><span class="line">docker volume create my_volume</span><br><span class="line">docker run -d -v my_volume:/data ubuntu</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录挂载  ：前为宿主机绝对路径 :后为镜像内挂载路径</span></span><br><span class="line">docker run -d -v /home/docker/data:/usr/data ubuntu</span><br></pre></td></tr></table></figure></li>
<li>docker export<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出容器</span></span><br><span class="line"> docker export 1e560fca3906 &gt; ubuntu.tar</span><br></pre></td></tr></table></figure></li>
<li>docker import <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入容器快照</span></span><br><span class="line"> cat docker/ubuntu.tar | docker import - test/ubuntu:v1 </span><br></pre></td></tr></table></figure></li>
<li>docker rm<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除容器 -f 强制</span></span><br><span class="line">docker rm  -f container_name</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>docker rmi<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个或多个镜像</span></span><br><span class="line">docker rmi -i my-image</span><br></pre></td></tr></table></figure></li>
<li>docker-compose<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker Compose 是一个用于定义和运行多容器 Docker 应用的工具。通过 Compose，用户可以使用一个 `docker-compose.yml` 配置文件定义多个容器（服务），并可以通过一个命令启动这些容器。Docker Compose 主要用于开发、测试和部署多容器的应用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">**功能**：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义和运行多个容器组成的应用。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 YAML 文件来配置应用的服务、网络和卷等。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个简单的 `docker-compose.yml` 文件来配置一个包含 Web 服务和数据库服务的应用：</span></span><br><span class="line"></span><br><span class="line">version: &quot;1.0&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:80&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql</span><br><span class="line">    environment:</span><br><span class="line">	    MYSQL_ROOT_PASSWORD: example</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Compose 定义的所有服务：</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止并删除由 `docker-compose` 启动的容器、网络等</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure></li>
<li>docker build <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build 使用 Dockerfile 构建镜像</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过定义一系列命令和参数，Dockerfile 指导 Docker 构建一个自定义的镜像。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">syntax=docker/dockerfile:1</span></span><br><span class="line">FROM python:3.10-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line">ENV FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">EXPOSE 5000</span><br><span class="line">COPY . .</span><br><span class="line">CMD [&quot;flask&quot;, &quot;run&quot;, &quot;--debug&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FROM 指定基础镜像，用于后续的指令构建</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WORKDIR 设置后续指令的工作目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENV 在容器内部设置环境变量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RUN 在构建过程中在镜像中执行命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">COPY 将文件或目录复制到镜像中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">EXPOSE 声明容器运行时监听的特定网络端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CMD 指定容器创建时的默认命令。（可以被覆盖）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT 设置容器创建时的主要命令。（不可被覆盖）类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ADD 将文件、目录或远程URL复制到镜像中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VOLUME 为容器创建挂载点或声明卷</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build</span> </span><br><span class="line">docker build -t my-image .</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/JVM/</url>
    <content><![CDATA[<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><ol>
<li>程序计数器 。当前线程所执行字节码的行号指示器。线程私有，唯一没有OOM的区域。</li>
<li>虚拟机栈。 线程私有。执行方法会创建栈帧，用于存储局部变量表、操作数栈、动态链接、方法出入口等信息。有StackOverflowError 和OOM.</li>
<li>本地方法栈。与虚拟机栈类似。只不过是为本地方法服务。</li>
<li>java堆。用于存放对象实例。是垃圾收集器管理的主要区域。通过-xmx 和-xms控制堆的大小（一般设置成一样，内存扩大或缩小导致应用停顿，降低延迟）</li>
<li>方法区。用于存储类信息、常量、静态变量、即时编译器编译后的代码等数据。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。有OOM。</li>
<li>运行时常量池。是方法区的一部分，用于存放编译期产生的各种字面量和符号引用。运行期间也可能有新的常量放入池中。</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/Mybatis/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/Nginx/</url>
    <content><![CDATA[<h4 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h4><ol>
<li>web服务器  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;   # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       location / <span class="punctuation">&#123;</span>  </span><br><span class="line">           root   /usr/share/nginx/html;  </span><br><span class="line">           index  index.html index.htm;  </span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">443</span> ssl;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       ssl_certificate      cert.pem;</span><br><span class="line">       ssl_certificate_key  cert.key;</span><br><span class="line">       location / <span class="punctuation">&#123;</span>  </span><br><span class="line">           root   /usr/share/nginx/html;  </span><br><span class="line">           index  index.html index.htm;  </span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>反向代理<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       location / <span class="punctuation">&#123;</span>  </span><br><span class="line">	       proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:8080; # 后端服务器与端口</span></span><br><span class="line">	       proxy_set_header Host $host; # 保留原始Host头</span><br><span class="line">	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>负载均衡<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream webservers<span class="punctuation">&#123;</span></span><br><span class="line">	</span><br><span class="line">	server <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span><span class="punctuation">:</span><span class="number">8080</span>;</span><br><span class="line">	server <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span><span class="punctuation">:</span><span class="number">8080</span>;</span><br><span class="line">	server <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span><span class="punctuation">:</span><span class="number">8080</span>;</span><br><span class="line">	# 可选的负载均衡策略 默认轮询</span><br><span class="line">	# ip_hash; # IP哈希</span><br><span class="line">	# least_conn; # 最少连接</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"> server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       location / <span class="punctuation">&#123;</span>  </span><br><span class="line">	       proxy_pass http<span class="punctuation">:</span><span class="comment">//webservers;</span></span><br><span class="line">	       proxy_set_header Host $host; # 保留原始Host头</span><br><span class="line">	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>URL重定向<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"> # 将老域名重定向到新域名 保持url不变</span><br><span class="line"> server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  old.com; # 绑定域名</span><br><span class="line">       location / <span class="punctuation">&#123;</span>  </span><br><span class="line">	       rewrite ^/(.*)$ https<span class="punctuation">:</span><span class="comment">//new.com/$1;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># URL变更</span><br><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       location / <span class="punctuation">&#123;</span>  </span><br><span class="line">	       rewrite ^/old-path/(.*)$ /new-path/$<span class="number">1</span>;</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>防盗链<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       location ~* \.(gif|jpg|png)$ <span class="punctuation">&#123;</span>  </span><br><span class="line">	       valid_referers none blocked *.something.com;</span><br><span class="line">	       if($invalid_referer) <span class="punctuation">&#123;</span></span><br><span class="line">		       return <span class="number">403</span>;</span><br><span class="line">	       <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>简易文件服务器<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       # 完整路径 /home/cartman/Downloads/test</span><br><span class="line">       location /test <span class="punctuation">&#123;</span>  </span><br><span class="line">	       root /home/cartman/Downloads;  </span><br><span class="line">	       # 显示目录;    </span><br><span class="line">		   autoindex on;  </span><br><span class="line">		   # 显示文件大小; 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb)    </span><br><span class="line">		   autoindex_exact_size off;    </span><br><span class="line">		   # 显示文件时间    </span><br><span class="line">		   autoindex_localtime on;</span><br><span class="line">		   # 避免中文乱码;    </span><br><span class="line">		   charset utf<span class="number">-8</span>;</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>基于不同请求路径转发不同服务<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span>  </span><br><span class="line">       listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">       server_name  localhost; # 绑定域名</span><br><span class="line">       location /path1/ <span class="punctuation">&#123;</span>  </span><br><span class="line">	       proxy_pass http<span class="punctuation">:</span><span class="comment">//ip1:8080; # 后端服务器与端口</span></span><br><span class="line">	       proxy_set_header Host $host; # 保留原始Host头</span><br><span class="line">	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       location /path2/ <span class="punctuation">&#123;</span>  </span><br><span class="line">	       proxy_pass http<span class="punctuation">:</span><span class="comment">//ip2:8080; # 后端服务器与端口</span></span><br><span class="line">	       proxy_set_header Host $host; # 保留原始Host头</span><br><span class="line">	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       location /path3/ <span class="punctuation">&#123;</span>  </span><br><span class="line">	       proxy_pass http<span class="punctuation">:</span><span class="comment">//ip3:8080; # 后端服务器与端口</span></span><br><span class="line">	       proxy_set_header Host $host; # 保留原始Host头</span><br><span class="line">	       proxy_set_header X-Real-IP $remote_addr; # 传递真实客户IP</span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">       </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>缓存</li>
</ol>
]]></content>
      <tags>
        <tag>soft</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/Redis/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Python</title>
    <url>/Python/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/Mysql/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/Singleton/</url>
    <content><![CDATA[<h2 id="单例模式是什么？"><a href="#单例模式是什么？" class="headerlink" title="单例模式是什么？"></a>单例模式是什么？</h2><p>单例模式就是在整个运行时域一个类只有一个实例对象。</p>
<p>通过单例模式的方法创建的类在当前进程中只有一个实例</p>
<h2 id="为什么需要单例模式？"><a href="#为什么需要单例模式？" class="headerlink" title="为什么需要单例模式？"></a>为什么需要单例模式？</h2><p>有的类比较庞大和复杂，如果频繁地创建和销毁对象，同时这些对象是完全可以复用的，那么就会造成不必要的性能浪费。</p>
<h2 id="单例模式主要关注三点"><a href="#单例模式主要关注三点" class="headerlink" title="单例模式主要关注三点"></a>单例模式主要关注三点</h2><ul>
<li>是不是线程安全</li>
<li>是不是懒加载(懒加载的好处：有的对象构建开销比较大，假如这个对象在项目启动的时候就构建了，万一从来没用到就比较浪费资源）</li>
<li>能不能通过反射进行破坏。</li>
</ul>
<h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 饿汉式1   </span></span><br><span class="line"><span class="comment"> * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 饿汉式2  </span></span><br><span class="line"><span class="comment"> * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 饿汉式3 静态代码块  </span></span><br><span class="line"><span class="comment"> * 缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton instance ;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 枚举类  </span></span><br><span class="line"><span class="comment"> * 线程安全（枚举类型默认是安全的）  </span></span><br><span class="line"><span class="comment"> * 避免反序列化破坏单例，使用枚举类型构造的单例是不能通过反射的方式进行破坏  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 懒汉式1  </span></span><br><span class="line"><span class="comment"> * 线程不安全  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 改进1  </span></span><br><span class="line"><span class="comment"> * 懒汉式2 synchronized 同步  </span></span><br><span class="line"><span class="comment"> * 线程安全 ，效率太低（只需在创建对象时做同步，可以直接使用对象的时候就没必要同步）  </span></span><br><span class="line"><span class="comment"> * 耗内存  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 改进2  </span></span><br><span class="line"><span class="comment"> * 懒汉式3 双重检查锁定  </span></span><br><span class="line"><span class="comment"> * 线程安全 ，比较常用 ，但是synchronized 依然有一定的性能影响  </span></span><br><span class="line"><span class="comment"> * java多线程：可见性  happens-before原则  </span></span><br><span class="line"><span class="comment"> * 1.程序顺序规则  </span></span><br><span class="line"><span class="comment"> * 2.锁定规则  </span></span><br><span class="line"><span class="comment"> * 3.volatile变量规则  </span></span><br><span class="line"><span class="comment"> * 4.线程启动规则  </span></span><br><span class="line"><span class="comment"> * 5.线程结束规则  </span></span><br><span class="line"><span class="comment"> * 6.中断规则  </span></span><br><span class="line"><span class="comment"> * 7.终结器规则  </span></span><br><span class="line"><span class="comment"> * 8.传递性规则  </span></span><br><span class="line"><span class="comment"> * 缺点：new Singleton()操作在指令层面不是一个原子操作，会分为三步  </span></span><br><span class="line"><span class="comment"> * 1.分配内存  </span></span><br><span class="line"><span class="comment"> * 2.初始化对象  </span></span><br><span class="line"><span class="comment"> * 3.对象指向内存地址  </span></span><br><span class="line"><span class="comment"> * 在真正执行时，JVM为了效率可能会对指令进行重排，比如先执行第一步，再执行第三步，再执行第二步，此时就会出现线程不安全的情况  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Singleton instance ;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance==<span class="literal">null</span>) &#123;  </span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 改进3  </span></span><br><span class="line"><span class="comment"> *懒汉式 ：双检锁+volatile  </span></span><br><span class="line"><span class="comment"> * 线程安全  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance==<span class="literal">null</span>) &#123;  </span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 改进4  </span></span><br><span class="line"><span class="comment"> * 静态内部类  </span></span><br><span class="line"><span class="comment"> * 线程安全</span></span><br><span class="line"><span class="comment"> * 效率高，避免了synchronized 带来的性能影响  </span></span><br><span class="line"><span class="comment"> * 注：静态内部类在程序启动的时候不会加载，只有第一次被调用的时候才会加载 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InstanceHolder</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">SINGLETON</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.SINGLETON;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * cas方式  </span></span><br><span class="line"><span class="comment"> * 优点：不需要使用传统的锁机制来保证线程安全，CAS是一种基于忙等待的算法，依赖底层硬件的实现，相对于锁它没有线程切换和阻塞的额外消耗，可以支持较大的并行度。  </span></span><br><span class="line"><span class="comment"> * 缺点：如果忙等待一直执行不成功，一直在死循环中，会对CPU造成较大的执行开销。而且这种写法如果有多个线程同时执行singleton= new Singleton(); 会比较耗费内存。  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> AtomicReference&lt;Singleton&gt; INSTANCE = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;Singleton&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;  </span><br><span class="line">            <span class="type">Singleton</span>  <span class="variable">singleton</span> <span class="operator">=</span> INSTANCE.get();  </span><br><span class="line">            <span class="keyword">if</span> (singleton!=<span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> singleton;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (INSTANCE.compareAndSet(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Singleton</span>())) &#123;  </span><br><span class="line">                <span class="keyword">return</span> INSTANCE.get();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Lock机制  </span></span><br><span class="line"><span class="comment"> * 类似双重校验锁写法  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="comment">//显式调用，手动加锁  </span></span><br><span class="line">            lock.lock();  </span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//显式调用，手动解锁  </span></span><br><span class="line">            lock.unlock();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot</title>
    <url>/Springboot/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>String</title>
    <url>/String/</url>
    <content><![CDATA[<p>java8种基本类型</p>
<ul>
<li>boolean (1位 true false)</li>
<li>byte (1字节存储基本单位）</li>
<li>char (16位） </li>
<li>short （16位） </li>
<li>int （32）</li>
<li>float （32） </li>
<li>double （64） </li>
<li>long （64</li>
</ul>
<h4 id="String的结构"><a href="#String的结构" class="headerlink" title="String的结构"></a>String的结构</h4><p>String的本质就是一个char数组</p>
<h4 id="String为什么用final修饰"><a href="#String为什么用final修饰" class="headerlink" title="String为什么用final修饰"></a>String为什么用final修饰</h4><ul>
<li><p>final修饰类，不可继承<br>final类中的所有成员方法都会被隐式地指定为final方法</p>
</li>
<li><p>final修饰属性，属性是不可修改的<br>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p>
</li>
<li><p>final修饰方法，不可重写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面这段话摘自《Java编程思想》第四版第143页：</span><br><span class="line">　　&quot;使用final方法的原因有两个。</span><br><span class="line">　　第一个原因是把方法锁定，以防任何继承类修改它的含义；</span><br><span class="line">　　第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。</span><br><span class="line">　　在最近的Java版本中，不需要使用final方法进行这些优化了。&quot;</span><br><span class="line">注：类的private方法会隐式地被指定为final方法。</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="String是不可变类型"><a href="#String是不可变类型" class="headerlink" title="String是不可变类型"></a>String是不可变类型</h4><ul>
<li>用final修饰</li>
<li>value数组权限控制，以及每次操作生成新对象<br>每次对String都不是在原有的value数组上进行改动，而是生成一个新的数组</li>
</ul>
<p>String为什么被设计成不可变类型</p>
<p>1.无法被继承 私有方法不能被重写（为了语义统一）<br>2.每次操作生成新对象<br>3.线程安全</p>
<p>使用HashMap HashSet 等结构时，一定要注意使用不可变类型作为key<br>假如要使用可变类型作为key，要重写hashCode方法和equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    Set&lt;StringBuilder&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;StringBuilder&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">stringBuilder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;a&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">stringBuilder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;ab&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    set.add(stringBuilder1);  </span><br><span class="line">  </span><br><span class="line">    set.add(stringBuilder2);  </span><br><span class="line">  </span><br><span class="line">    stringBuilder1.append(<span class="string">&quot;b&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    System.out.println(set);  </span><br><span class="line">    <span class="comment">// 打印结果： [ab, ab] </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h4><p>String常量池位于方法区，一部分是编译期，一部分是运行时。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    String test=<span class="string">&quot;123&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(test==<span class="string">&quot;1&quot;</span>+<span class="string">&quot;2&quot;</span>+<span class="string">&quot;3&quot;</span>);<span class="comment">//true  </span></span><br><span class="line">  </span><br><span class="line">    System.out.println(test==str+str1+str2);<span class="comment">//false  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">s0</span> <span class="operator">=</span> <span class="string">&quot;12&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>+s1;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(s0==s2); <span class="comment">//true  </span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="String中的intern方法"><a href="#String中的intern方法" class="headerlink" title="String中的intern方法"></a>String中的intern方法</h4><p>public native String intern();</p>
<blockquote>
<p>intern 方法用于扩充常量池<br>“abc”.intern()</p>
</blockquote>
<p>首先检查常量池中是否有“abc”，如果存在直接返回实例引用</p>
<p>如果不存在，会在常量池中新增“abc”，然后返回实例引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    String s1=<span class="string">&quot;abc&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    System.out.println(s1==s2);<span class="comment">//false  </span></span><br><span class="line">  </span><br><span class="line">    System.out.println(s1==s2.intern());<span class="comment">//true  </span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别"><a href="#String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别" class="headerlink" title="String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别"></a>String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别</h4><p>String是不可变类型<br>StringBuilder和StringBuffer是可变类型<br>StringBuilder是线程不安全的<br>StringBuffer是线程安全的</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/Spring/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Springcloud</title>
    <url>/Springcloud/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>其他</title>
    <url>/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<h5 id="vps搭服务器"><a href="#vps搭服务器" class="headerlink" title="vps搭服务器"></a>vps搭服务器</h5><ul>
<li><a href="https://github.com/Alvin9999/new-pac">教程</a></li>
<li><a href="https://www.vultr.com/">服务器</a></li>
<li>账号：<a href="mailto:&#x63;&#97;&#114;&#116;&#109;&#97;&#x6e;&#57;&#53;&#x32;&#x37;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#x63;&#97;&#114;&#116;&#109;&#97;&#x6e;&#57;&#53;&#x32;&#x37;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a></li>
<li>安装：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统:centos</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装wget</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载脚本 ，赋权，运行</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 grub</span></span><br><span class="line">yum install grub2</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态命令：</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止firewall命令：</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止firewall开机启动命令：</span></span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">**下载一键加速VPS服务器 脚本  赋权 运行**</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可不执行</span></span><br><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; bash tcp.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="双系统配置"><a href="#双系统配置" class="headerlink" title="双系统配置"></a>双系统配置</h5><ul>
<li><p>在 &#x2F;boot&#x2F;grub&#x2F;grub.cfg 文件中添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## BEGIN /etc/grub.d/30_os-prober ###</span></span></span><br><span class="line">menuentry &#x27;WIN11&#x27; &#123;</span><br><span class="line"></span><br><span class="line">   insmod chain  </span><br><span class="line"></span><br><span class="line">   search --fs-uuid --no-floppy --set=root 1AC6-9E41  </span><br><span class="line"></span><br><span class="line">   chainloader ($&#123;root&#125;)/efi/Microsoft/Boot/bootmgfw.efi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## END /etc/grub.d/30_os-prober ###</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>其中 WIN11 为名称,可修改. root 1AC6-9E41, 1AC6-9E41 为windows EFI分区的UUID</p>
</li>
<li><p>查看磁盘分区情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># list block devices</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure></li>
<li><p>查看磁盘UUID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo blkid /dev/nvme1n1p1</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改磁盘挂载配置文件 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstabab</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UUID=543CD83E3CD81D34 /home/cartman/G ntfs-3g user,rw,dev,utf8,fmask=111,dmask=000 0 0</span>    </span><br><span class="line">UUID=543CD83E3CD81D34 /mnt/G ntfs-3g defaults 0 0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH-KEY"></a>配置SSH-KEY</h5><ul>
<li>生成SSH-KEY<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;291857567@qq.com&#x27; -f /home/cartman/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></li>
<li>在 ~&#x2F;.ssh 目录下新建config文件添加如下内容：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line"></span><br><span class="line">HostName github.com</span><br><span class="line"></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">IdentityFile /home/cartman/.ssh/github_id_rsa</span><br><span class="line"></span><br><span class="line">Host gitee.com</span><br><span class="line"></span><br><span class="line">HostName gitee.com</span><br><span class="line"></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">IdentityFile /home/cartman/.ssh/id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在github&#x2F;gitee管理页面添加SSH-KEY</li>
</ul>
<h5 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密</span></span><br><span class="line">echo test | base64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解密</span></span><br><span class="line">echo dGVzdAo= | base64 -d</span><br></pre></td></tr></table></figure>

<h5 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka启动</span></span><br><span class="line">./kafka-server-start.sh -daemon ../config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看topics 列表</span></span><br><span class="line">./kafka-topics.sh --zookeeper localhost:3181 --list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建topic</span></span><br><span class="line">./kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个topic详情</span></span><br><span class="line">./kafka-topics.sh --describe --topic test --bootstrap-server localhost:9092</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行发送消息 --broker-list 或者 --bootstrap-server 取决于版本</span></span><br><span class="line">./kafka-console-producer.sh --topic test --broker-list localhost:9092</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行查看接收消息</span></span><br><span class="line">./kafka-console-consumer.sh --topic test --from-beginning --bootstrap-server localhost:9092</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g wscat</span><br><span class="line">wscat --listen 9000</span><br><span class="line">wscat --connect ws://localhost:9000/echo</span><br></pre></td></tr></table></figure>

<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Archlinux/Manjaro使用笔记-报错：一个或多个 PGP 签名无法校验！的解决方法</span> </span><br><span class="line">gpg --recv-keys xxxxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解锁一个用户</span></span><br><span class="line">faillock --user cartman --reset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">head</span>登录带密码的es</span></span><br><span class="line">http://localhost:9100/?auth_user=elastic&amp;auth_password=yangjinbiao5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git .gitignore不起作用时</span></span><br><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure>


<h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p><img src="/.io//2.png"><br><img src="/.io//1.png"></p>
]]></content>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p> 软件开发的一个不变真理:CHANGE</p>
<hr>
<h4 id="设计原则1："><a href="#设计原则1：" class="headerlink" title="设计原则1："></a>设计原则1：</h4><ul>
<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混合在一起</li>
</ul>
<h4 id="设计原则2："><a href="#设计原则2：" class="headerlink" title="设计原则2："></a>设计原则2：</h4><ul>
<li>针对接口编程而不是针对实现编程</li>
</ul>
<h4 id="设计原则3："><a href="#设计原则3：" class="headerlink" title="设计原则3："></a>设计原则3：</h4><ul>
<li>多用组合，少用继承</li>
</ul>
<h4 id="设计原则4："><a href="#设计原则4：" class="headerlink" title="设计原则4："></a>设计原则4：</h4><ul>
<li>为交互对象间的松耦合设计而努力（对象之间的交互尽量设计成松耦合）</li>
</ul>
<h4 id="设计原则5："><a href="#设计原则5：" class="headerlink" title="设计原则5："></a>设计原则5：</h4><ul>
<li>开放-关闭原则。类应该对扩展开放，对修改关闭。</li>
</ul>
<h4 id="设计原则6："><a href="#设计原则6：" class="headerlink" title="设计原则6："></a>设计原则6：</h4><ul>
<li>依赖倒置原则。 要依赖抽象，不要依赖具体类。</li>
</ul>
<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><ul>
<li>定义算法族，分别封装起来，让它们可以互相替换。此模式让算法的变化独立于使用算法的客户。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CalculatorStrategy</span> &#123;  </span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(BigDecimal num1, BigDecimal num2)</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddStrategy</span> <span class="keyword">implements</span> <span class="title class_">CalculatorStrategy</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(BigDecimal num1, BigDecimal num2)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> num1.add(num2).doubleValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivideStrategy</span> <span class="keyword">implements</span> <span class="title class_">CalculatorStrategy</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(BigDecimal num1, BigDecimal num2)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (num2.longValue() == <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Divisor cannot be zero!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//return num1 / num2;  </span></span><br><span class="line">        <span class="keyword">return</span> num1.divide(num2).longValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiplyStrategy</span> <span class="keyword">implements</span> <span class="title class_">CalculatorStrategy</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(BigDecimal num1, BigDecimal num2)</span> &#123;  </span><br><span class="line">        <span class="comment">//return num1 * num2;  </span></span><br><span class="line">        <span class="keyword">return</span> num1.multiply(num2).longValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubtractStrategy</span> <span class="keyword">implements</span> <span class="title class_">CalculatorStrategy</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(BigDecimal num1, BigDecimal num2)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> num1.subtract(num2).longValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorContext</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> CalculatorStrategy strategy;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorContext</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(CalculatorStrategy strategy)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">executeStrategy</span><span class="params">(String num1, String num2)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (strategy == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Strategy cannot be null!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> strategy.calculate(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(num1), <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(num2));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略模式  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;  </span><br><span class="line">        <span class="type">CalculatorContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorContext</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 设置加法策略并执行计算  </span></span><br><span class="line">        context.setStrategy(<span class="keyword">new</span> <span class="title class_">AddStrategy</span>());  </span><br><span class="line">        <span class="type">Float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.3f</span>;  </span><br><span class="line">        <span class="type">double</span> <span class="variable">result1</span> <span class="operator">=</span> context.executeStrategy(<span class="string">&quot;10.2&quot;</span>, f.toString());  </span><br><span class="line">        System.out.println(<span class="string">&quot;result1=&quot;</span>+result1);  </span><br><span class="line">        <span class="comment">// 设置减法策略并执行计算  </span></span><br><span class="line">        context.setStrategy(<span class="keyword">new</span> <span class="title class_">SubtractStrategy</span>());  </span><br><span class="line">        <span class="type">double</span> <span class="variable">result2</span> <span class="operator">=</span> context.executeStrategy(<span class="string">&quot;10.1&quot;</span>,<span class="string">&quot;2.5&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;result2=&quot;</span>+result2);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 设置乘法策略并执行计算  </span></span><br><span class="line">        context.setStrategy(<span class="keyword">new</span> <span class="title class_">MultiplyStrategy</span>());  </span><br><span class="line">        <span class="type">double</span> <span class="variable">result3</span> <span class="operator">=</span> context.executeStrategy(<span class="string">&quot;10&quot;</span>, <span class="string">&quot;2.7&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;result3=&quot;</span>+result3);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 设置除法策略并执行计算  </span></span><br><span class="line">        context.setStrategy(<span class="keyword">new</span> <span class="title class_">DivideStrategy</span>());  </span><br><span class="line">        <span class="type">double</span> <span class="variable">result4</span> <span class="operator">=</span> context.executeStrategy(<span class="string">&quot;10.5&quot;</span>, <span class="string">&quot;2.8&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;result4=&quot;</span>+result4);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ul>
<li>定义了对象之间一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察者接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主题接口  </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span>;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体主题类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> state;  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.state = state;  </span><br><span class="line">        notifyObservers();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span> &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;  </span><br><span class="line">            observers.add(observer);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span> &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;  </span><br><span class="line">            observers.remove(observer);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;  </span><br><span class="line">            <span class="keyword">for</span> (Observer observer : observers) &#123;  </span><br><span class="line">                observer.update();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体观察者类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> ConcreteSubject subject;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteObserver</span><span class="params">(ConcreteSubject subject,String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.subject = subject;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;观察者&quot;</span>+name+<span class="string">&quot;收到通知，主题状态更新为：&quot;</span> + subject.getState());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPatternExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">ConcreteSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();  </span><br><span class="line">        <span class="type">ConcreteObserver</span> <span class="variable">observer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(subject,<span class="string">&quot;张三&quot;</span>);  </span><br><span class="line">        <span class="type">ConcreteObserver</span> <span class="variable">observer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(subject,<span class="string">&quot;李四&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        subject.registerObserver(observer1);  </span><br><span class="line">        subject.registerObserver(observer2);  </span><br><span class="line">  </span><br><span class="line">        subject.setState(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">        subject.setState(<span class="number">20</span>);  </span><br><span class="line">        subject.setState(<span class="number">30</span>);  </span><br><span class="line">  </span><br><span class="line">        subject.removeObserver(observer1);  </span><br><span class="line">  </span><br><span class="line">        subject.setState(<span class="number">40</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><ul>
<li>动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</li>
</ul>
<h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><ul>
<li>定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;ProductA operation&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;ProductB operation&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">(String type)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;A&quot;</span>.equals(type))&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;B&quot;</span>.equals(type))&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid product type.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Product</span> <span class="variable">a</span> <span class="operator">=</span> factory.createProduct(<span class="string">&quot;A&quot;</span>);  </span><br><span class="line">            a.operation();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException runtimeException)&#123;  </span><br><span class="line">            System.out.println(runtimeException.getLocalizedMessage());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Product</span> <span class="variable">b</span> <span class="operator">=</span> factory.createProduct(<span class="string">&quot;B&quot;</span>);  </span><br><span class="line">            b.operation();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException runtimeException)&#123;  </span><br><span class="line">            System.out.println(runtimeException.getLocalizedMessage());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Product</span> <span class="variable">c</span> <span class="operator">=</span> factory.createProduct(<span class="string">&quot;C&quot;</span>);  </span><br><span class="line">            c.operation();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException runtimeException)&#123;  </span><br><span class="line">            System.out.println(runtimeException.getLocalizedMessage());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul>
<li>提供了一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</li>
</ul>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul>
<li>详情请看 <em><strong><a href="/Singleton">单例模式</a></strong></em></li>
</ul>
]]></content>
      <tags>
        <tag>soft</tag>
      </tags>
  </entry>
</search>
