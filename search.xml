<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>String</title>
    <url>/2023/08/11/String/</url>
    <content><![CDATA[<p>|java8种基本类型<br>boolean (1位 true false)  <br>byte (1字节存储基本单位）  <br>char (16位）  <br>short （16位）  <br>int （32）  <br>float （32）  <br>double （64）  <br>long （64）|</p>
<h4 id="String的结构"><a href="#String的结构" class="headerlink" title="String的结构"></a><a href="https://yangjinbiao5.github.io/2020/08/16/String/#String%E7%9A%84%E7%BB%93%E6%9E%84" title="String的结构"></a>String的结构</h4><p>String的本质就是一个char数组</p>
<h4 id="String为什么用final修饰"><a href="#String为什么用final修饰" class="headerlink" title="String为什么用final修饰"></a><a href="https://yangjinbiao5.github.io/2020/08/16/String/#String%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8final%E4%BF%AE%E9%A5%B0" title="String为什么用final修饰"></a>String为什么用final修饰</h4><ul>
<li>final修饰类，不可继承</li>
</ul>
<p>final类中的所有成员方法都会被隐式地指定为final方法</p>
<ul>
<li>final修饰属性，属性是不可修改的</li>
</ul>
<p>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p>
<ul>
<li>final修饰方法，不可重写</li>
</ul>
<p>下面这段话摘自《Java编程思想》第四版第143页：</p>
<p>　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“</p>
<p>注：类的private方法会隐式地被指定为final方法。</p>
<h4 id="String是不可变类型"><a href="#String是不可变类型" class="headerlink" title="String是不可变类型"></a><a href="https://yangjinbiao5.github.io/2020/08/16/String/#String%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B" title="String是不可变类型"></a>String是不可变类型</h4><ul>
<li>用final修饰</li>
<li>value数组权限控制，以及每次操作生成新对象</li>
</ul>
<p>每次对String都不是在原有的value数组上进行改动，而是生成一个新的数组</p>
<h4 id="String为什么被设计成不可变类型"><a href="#String为什么被设计成不可变类型" class="headerlink" title="String为什么被设计成不可变类型"></a><a href="https://yangjinbiao5.github.io/2020/08/16/String/#String%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A2%AB%E8%AE%BE%E8%AE%A1%E6%88%90%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B" title="String为什么被设计成不可变类型"></a>String为什么被设计成不可变类型</h4><p>1.无法被继承 私有方法不能被重写（为了语义统一）</p>
<p>2.每次操作生成新对象</p>
<p>3.线程安全</p>
<p>使用HashMap HashSet 等结构时，一定要注意使用不可变类型作为key</p>
<p>假如要使用可变类型作为key，要重写hashCode方法和equals方法</p>
<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>public static void main(String[] args) {  <br>        Set<StringBuilder> set &#x3D; new HashSet<StringBuilder>();</td>
</tr>
</tbody></table>
<pre><code>    StringBuilder stringBuilder1 = new StringBuilder(&quot;a&quot;);  
    StringBuilder stringBuilder2 = new StringBuilder(&quot;ab&quot;); 
    set.add(stringBuilder1);  
    set.add(stringBuilder2);  
    stringBuilder1.append(&quot;b&quot;);  
    System.out.println(set);  
</code></pre>
<p>}<br>打印结果： [ab, ab]|</p>
<h4 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h4><p>String常量池位于方法区，一部分是编译期，一部分是运行时。</p>
<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
</tr>
<tr>
<td>public static void main(String[] args) {</td>
</tr>
</tbody></table>
<pre><code>String test=&quot;123&quot;;
String str = &quot;1&quot;;  
String str1 = &quot;2&quot;;  
String str2 = &quot;3&quot;;  
System.out.println(test==&quot;1&quot;+&quot;2&quot;+&quot;3&quot;);//true  
System.out.println(test==str+str1+str2);//false 
String s0 = &quot;12&quot;;  
final String s1 = &quot;2&quot;;  
String s2 = &quot;1&quot;+s1;  
System.out.println(s0==s2); //true 
</code></pre>
<p>}<br>|</p>
<h4 id="String中的intern方法"><a href="#String中的intern方法" class="headerlink" title="String中的intern方法"></a>String中的intern方法</h4><table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
</tr>
<tr>
<td>public native String intern();</td>
</tr>
</tbody></table>
<blockquote>
<p>intern 方法用于扩充常量池<br>“abc”.intern()<br>首先检查常量池中是否有“abc”，如果存在直接返回实例引用<br>如果不存在，会在常量池中新增“abc”，然后返回实例引用<br>public static void main(String[] args) {<br>String s1&#x3D;”abc”;  </p>
</blockquote>
<p>String s2 &#x3D; new String(“abc”);<br>System.out.println(s1&#x3D;&#x3D;s2);&#x2F;&#x2F;false<br>System.out.println(s1&#x3D;&#x3D;s2.intern());&#x2F;&#x2F;true<br>}<br>|</p>
<h4 id="String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别"><a href="#String-，StringBuilder，StringBuffer-区别”-String-，StringBuilder，StringBuffer-区别" class="headerlink" title="String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别"></a>String ，StringBuilder，StringBuffer 区别”)String ，StringBuilder，StringBuffer 区别</h4><p>String是不可变类型，</p>
<p>StringBuilder和StringBuffer是可变类型，StringBuilder是线程不安全的，StringBuffer是线程安全的</p>
]]></content>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2023/08/08/Singleton/</url>
    <content><![CDATA[<h2 id="单例模式是什么？"><a href="#单例模式是什么？" class="headerlink" title="单例模式是什么？"></a>单例模式是什么？</h2><p>单例模式就是在整个运行时域一个类只有一个实例对象。</p>
<p>通过单例模式的方法创建的类在当前进程中只有一个实例</p>
<h2 id="为什么需要单例模式？"><a href="#为什么需要单例模式？" class="headerlink" title="为什么需要单例模式？"></a><a href="https://yangjinbiao5.github.io/2020/08/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%9F" title="为什么需要单例模式？"></a>为什么需要单例模式？</h2><p>有的类比较庞大和复杂，如果频繁地创建和销毁对象，同时这些对象是完全可以复用的，那么就会造成不必要的性能浪费。</p>
<h2 id="单例模式主要关注三点"><a href="#单例模式主要关注三点" class="headerlink" title="单例模式主要关注三点"></a><a href="https://yangjinbiao5.github.io/2020/08/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%BB%E8%A6%81%E5%85%B3%E6%B3%A8%E4%B8%89%E7%82%B9" title="单例模式主要关注三点"></a>单例模式主要关注三点</h2><ul>
<li>是不是线程安全</li>
<li>是不是懒加载(懒加载的好处：有的对象构建开销比较大，假如这个对象在项目启动的时候就构建了，万一从来没用到就比较浪费资源）</li>
<li>能不能通过反射进行破坏。</li>
</ul>
<h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a><a href="https://yangjinbiao5.github.io/2020/08/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#%E9%A5%BF%E6%B1%89%E6%A8%A1%E5%BC%8F" title="饿汉模式"></a>饿汉模式</h3><p>饿汉式1 </p>
<p>public class Singleton {  <br>  <br>    private Singleton(){  <br>    }  <br>    private static final Singleton instance &#x3D; new Singleton();  <br>  <br>    public static Singleton getInstance() {  <br>        return instance;  <br>    }  <br>      <br>}  <br>缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源  <br>  <br>&#x2F;**  <br> * 饿汉式2  <br> <em>&#x2F;<br><br>  <br><br>public class Singleton {  <br>    private Singleton(){  <br>    };  <br>    public static final Singleton instance &#x3D; new Singleton();  <br>}  <br>  <br>&#x2F;</em>*  <br> * 饿汉式3  <br> * 静态代码块  <br> <em>&#x2F;  <br>public class Singleton {  <br>  <br>    private Singleton(){}  <br>  <br>    private  static Singleton instance &#x3D; null;  <br>  <br>    static {  <br>        instance &#x3D; new Singleton();  <br>    }  <br>  <br>    public static Singleton getInstance(){  <br>        return instance;  <br>    }  <br>}  <br>  <br>  <br>缺点：不是懒加载，如果对象创建开销比较大，万一从来没有用到就比较浪费资源  <br>  <br>  <br>&#x2F;</em>*  <br> * 线程安全（枚举类型默认是安全的  <br> * 避免反序列化破坏单例  <br> <em>&#x2F;  <br>public enum Singleton {  <br>    &#x2F;</em>*  <br>     *  <br>     *&#x2F;  <br>    INSTANCE;  <br>}  <br>  <br>使用枚举类型构造的单例是不能通过反射的方式进行破坏。|</p>
<h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a><a href="https://yangjinbiao5.github.io/2020/08/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#%E6%87%92%E6%B1%89%E6%A8%A1%E5%BC%8F" title="懒汉模式"></a>懒汉模式</h3><table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;**  <br> * 懒汉式1  <br> * 线程不安全  <br> <em>&#x2F;  <br>public class Singleton {  <br>    private Singleton(){}  <br>  <br>    private static Singleton instance &#x3D; null;  <br>  <br>    public static Singleton getInstance(){  <br>        if (instance &#x3D;&#x3D; null){  <br>            instance &#x3D; new Singleton4();  <br>        }  <br>        return instance;  <br>    }  <br>}  <br>  <br>  <br>  <br>  <br>改进1  <br>&#x2F;</em>*  <br> * 懒汉式2 synchronized 同步  <br> * 线程安全 ，效率太低（只需在创建对象时做同步，可以直接使用对象的时候就没必要同步）  <br> * 耗内存  <br> <em>&#x2F;  <br>public class Singleton5 {  <br>  <br>    private Singleton5(){}  <br>  <br>    private static Singleton5 instance;  <br>  <br>    public synchronized static Singleton5 getInstance() {  <br>        if (instance &#x3D;&#x3D; null) {  <br>            instance &#x3D; new Singleton5();  <br>        }  <br>        return  instance;  <br>    }  <br>}  <br>  <br>改进2  <br>&#x2F;</em>*  <br> * 懒汉式 ：双重检查锁定  <br> * 线程安全  <br> * 比较常用 ，但是synchronized 依然有一定的性能影响  <br> <em>&#x2F;  <br>public class Singleton {  <br>    private Singleton(){}  <br>    private static Singleton instance;  <br>    public static Singleton getInstance(){  <br>        if (instance &#x3D;&#x3D; null) {  <br>            synchronized (Singleton.class){  <br>                if (instance &#x3D;&#x3D; null) {  <br>                    instance &#x3D; new Singleton();  <br>                }  <br>            }  <br>        }  <br>        return instance;  <br>    }  <br>}  <br>java多线程：可见性  <br>happens-before原则  <br>1.程序顺序规则  <br>2.锁定规则  <br>3.volatile变量规则  <br>4.线程启动规则  <br>5.线程结束规则  <br>6.中断规则  <br>7.终结器规则  <br>8.传递性规则  <br>缺点：new Singleton()操作在指令层面不是一个原子操作，会分为三步  <br>1.分配内存  <br>2.初始化对象  <br>3.对象指向内存地址  <br>在真正执行时，JVM为了效率可能会对指令进行重排，比如先执行第一步，再执行第三步，再执行第二步，此时就会出现线程不安全的情况  <br>  <br>改进3  <br>&#x2F;</em>*  <br> * 懒汉式 ：双检锁+volatile  <br> * 线程安全  <br> <em>&#x2F;  <br>public class Singleton {  <br>    private Singleton(){}  <br>    private volatile static Singleton instance;  <br>    public static Singleton getInstance(){  <br>        if (instance &#x3D;&#x3D; null) {  <br>            synchronized (Singleton.class){  <br>                if (instance &#x3D;&#x3D; null) {  <br>                    instance &#x3D; new Singleton();  <br>                }  <br>            }  <br>        }  <br>        return instance;  <br>    }  <br>}  <br>缺点：写起来稍微复杂  <br>  <br>改进4  <br>&#x2F;</em>*  <br> * 静态内部类  <br> * 线程安全  <br> * 效率高，避免了synchronized 带来的性能影响  <br> <em>&#x2F;  <br>public class Singleton {  <br>  <br>    private Singleton(){}  <br>  <br>    private static class InstanceHolder {  <br>        private static final Singleton7 SINGLETON &#x3D; new Singleton();  <br>    }  <br>    public static final Singleton getInstance (){  <br>        return InstanceHolder.SINGLETON;  <br>    }  <br>}  <br>注：静态内部类在程序启动的时候不会加载，只有第一次被调用的时候才会加载  <br>  <br>  <br>  <br>&#x2F;</em>*  <br> * CAS 方式  <br> * 优点：不需要使用传统的锁机制来保证线程安全，  <br> * CAS是一种基于忙等待的算法，依赖底层硬件的实现，相对于锁它没有线程切换和阻塞的额外消耗，可以支持较大的并行度。  <br> * 缺点：如果忙等待一直执行不成功，一直在死循环中，会对CPU造成较大的执行开销。而且这种写法如果有多个线程同时执行singleton&#x3D; new Singleton();  <br> * 会比较耗费内存。  <br> *&#x2F;  <br></td>
</tr>
<tr>
<td>public class Singleton {</td>
</tr>
</tbody></table>
<pre><code>private Singleton()&#123;&#125;  

private static final AtomicReference&lt;Singleton&gt; INSTANCE = new AtomicReference&lt;Singleton&gt;();  

public static Singleton getInstance()&#123;  
    for(;;)&#123;  
        Singleton instance = INSTANCE.get();  
        if (instance!=null)&#123;  
            return instance;  
        &#125;  
        instance = new Singleton();  
        if (INSTANCE.compareAndSet(null,instance))&#123;  
            return instance;  
        &#125;  
    &#125;  
&#125;  
</code></pre>
<p>}</p>
<p>&#x2F;**  </p>
<ul>
<li><p>Lock机制  </p>
</li>
<li><p>类似双重校验锁写法<br> *&#x2F;<br>public class Singleton {  </p>
<p> private Singleton(){}  </p>
<p> private static Singleton instance &#x3D; null;  </p>
<p> private static Lock lock &#x3D; new ReentrantLock();  </p>
<p> public static Singleton getInstance(){<br> if (instance &#x3D;&#x3D; null){<br>     &#x2F;&#x2F;显式调用，手动加锁<br>     lock.lock();<br>     if (instance &#x3D;&#x3D; null){<br>         instance &#x3D; new Singleton();<br>     }<br>     &#x2F;&#x2F;显式调用，手动解锁<br>     lock.unlock();<br> }<br> return instance;<br> }</p>
</li>
</ul>
<p>}</p>
]]></content>
  </entry>
</search>
